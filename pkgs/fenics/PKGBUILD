#!/bin/bash

pkgname=fenics
pkgver=2019.1.0
dstdir=$mkToolchainPkgs/$pkgname/$pkgver

dolfinarchive=dolfin-$pkgver.tar.gz
dolfinsum=4f78366458ff166ee84960e80b7eb77ae517f7f4

mshrarchive=mshr-$pkgver.tar.gz
mshrsum=f8b03e68cc77a57c0e88ee5ca8d09cb9b637f791

package() {
  download https://bitbucket.org/fenics-project/dolfin/downloads/$dolfinarchive
  download https://bitbucket.org/fenics-project/mshr/downloads/$mshrarchive

  check $dolfinarchive $dolfinsum
  check $mshrarchive $mshrsum

  extract $dolfinarchive
  extract $mshrarchive

  module load boost
  module load eigen
  module load hdf5
  module load metis
  module load openblas
  module load petsc
  module load pybind11
  module load scipy
  module load scotch
  module load suitesparse
  module load trilinos

  # required python packages
  pip3 install --prefix=$dstdir ply

  # make python happy
  export PATH="$dstdir"/bin:$PATH
  export PYTHONPATH="$dstdir"/lib/python3.9/site-packages:$PYTHONPATH

  # installing FIAT
  message "Installing FIAT"
  pip install --verbose --prefix=$dstdir fenics-fiat
  message "Installing DIJITSO"
  pip install --verbose --prefix=$dstdir fenics-dijitso
  message "Installing UFL"
  pip install --verbose --prefix=$dstdir fenics-ufl
  message "Installing FFC"
  pip install --verbose --prefix=$dstdir fenics-ffc
  
  # installing dolfin
  pushd dolfin-$pkgver
    message "Patching dolfin"
    [[ -r "$srcdir/dolfin-$pkgver.patch" ]] && \
      patch -p1 -i "$srcdir/dolfin-$pkgver.patch"
  popd

  mkdir build
  pushd build
    message "Configuring dolfin"
    HDF5_DIR="$mkHdf5Prefix" \
    PETSC_DIR="$mkPetscPrefix" \
    DOLFIN_ENABLE_PETSC4PY="ON" \
    SLEPC_DIR="$mkPetscPrefix" \
    cmake -D CMAKE_INSTALL_PREFIX="$dstdir" \
          -D CMAKE_SKIP_INSTALL_RPATH=ON \
          -D CMAKE_SKIP_RPATH=ON \
          -D BUILD_SHARED_LIBS=ON \
          -D CMAKE_BUILD_TYPE=Release \
          -D DOLFIN_ENABLE_BENCHMARKS=OFF \
          -D DOLFIN_ENABLE_CODE_COVERAGE=OFF \
          -D DOLFIN_ENABLE_DOCS=OFF \
          -D BLAS_LIBRARIES="$mkOpenblasLib/libopenblas.so" \
          -D LAPACK_LIBRARIES="$mkOpenblasLib/libopenblas.so" \
          -D AMD_DIR="$mkSuitesparsePrefix" \
          -D BOOST_ROOT="$mkBoostPrefix" \
          -D CHOLMOD_DIR="$mkSuitesparsePrefix" \
          -D EIGEN3_INCLUDE_DIR="$mkEigenInc" \
          -D PARMETIS_DIR="$mkMetisPrefix" \
          -D SCOTCH_DIR="$mkScotchPrefix" \
          -D TRILINOS_DIR="$mkTrilinosPrefix" \
          -D UMFPACK_DIR="$mkSuitesparsePrefix" \
          -D ZLIB_INCLUDE_DIR="$mkToolchainBase/include" \
          ../dolfin-$pkgver
    message "Compiling dolfin"
    make VERBOSE=1
    message "Installing dolfin"
    make install

    cd ../dolfin-$pkgver/python
    message "Installing dolfin Python interface"

    BOOST_DIR=$mkBoostPrefix \
    PYBIND11_DIR=$mkPybind11Prefix \
    python3 setup.py install --prefix="$dstdir" --optimize=1
  popd

  # installing mshr
  pushd mshr-$pkgver
    message "Patching mshr"
    [[ -r "$srcdir/mshr-$pkgver.patch" ]] && \
      patch -p1 -i "$srcdir/mshr-$pkgver.patch"
  popd
  pushd build
    rm -rf *
    message "Configuring mshr"
    cmake -D CMAKE_INSTALL_PREFIX="$dstdir" \
          -D CMAKE_SKIP_INSTALL_RPATH=ON \
          -D CMAKE_SKIP_RPATH=ON \
          -D BUILD_SHARED_LIBS=ON \
          -D CMAKE_BUILD_TYPE=Release \
          -D BOOST_ROOT="$mkBoostPrefix" \
          -D DOLFIN_DIR="$dstdir" \
          -D EIGEN3_INCLUDE_DIR="$mkEigenInc" \
          ../mshr-$pkgver
    message "Compiling mshr"
    make VERBOSE=1
    message "Installing mshr"
    make install

    cd ../mshr-$pkgver/python
    message "Installing mshr Python interface"

    CPPFLAGS+="-I$mkBoostInc" \
    PYBIND11_DIR=$mkPybind11Prefix \
    python3 setup.py install --prefix="$dstdir" --optimize=1
  popd

  # installing cbc.block
  git clone https://bitbucket.org/fenics-apps/cbc.block.git
  pushd cbc.block
    message "Installing cbc.block"
    python3 setup.py install --prefix="$dstdir" --optimize=1
  popd

  strip "$dstdir/bin"
  strip "$dstdir/lib"

  reset_rpath "$dstdir/bin"
  reset_rpath "$dstdir/lib"

  compress_doc "$dstdir/share/man"

  if [[ "$mkTest" = "no" ]]; then
    install -vd $mkToolchainModules/$pkgname
    cat > $mkToolchainModules/$pkgname/$pkgver.lua << EOF
-- -*- lua -*-
whatis("A collection of software components for the automated solution of differential equations.")
help([[
The Fenics is installed in "\$mkFenicsPrefix" directory, the dynamic libraries
are located in "\$mkFenicsLib" directory and header files in "\$mkFenicsInc".

url: https://fenicsproject.org
]])

load("boost")
load("eigen")
load("hdf5")
load("metis")
load("openblas")
load("petsc")
load("scipy")
load("scotch")
load("suitesparse")
load("trilinos")

setenv("mkFenicsPrefix", "$dstdir")
setenv("mkFenicsLib", "$dstdir/lib")
setenv("mkFenicsInc", "$dstdir/include")

prepend_path("PATH", "$dstdir/bin")
prepend_path("MANPATH", "$dstdir/share/man")
prepend_path("PYTHONPATH", "$dstdir/lib/python3.9/site-packages")
prepend_path("LD_LIBRARY_PATH", "$dstdir/lib")
prepend_path("PKG_CONFIG_PATH", "$dstdir/lib/pkgconfig")

EOF
  fi
}
