#!/bin/bash

pkgname=fenics
pkgver=2019.1.0
dstdir=$mkToolchainPkgs/$pkgname/$pkgver

fiatarchive=fiat-$pkgver.tar.gz
fiatsum=687fa1f175ec79c6af8a8391e0a5e17d238cecf8

dijitsoarchive=dijitso-$pkgver.tar.gz
dijitsosum=24b18765447e6b5cecfd0e0c0a8762bd842276e6

uflarchive=ufl-$pkgver.tar.gz
uflsum=a84d0e89bfe7497e7e9bb3ed492d66f59eb95a51

ffcarchive=ffc-$pkgver.tar.gz
ffcsum=5166eecafef8113942331decdfaa87120f76620b

dolfinarchive=dolfin-$pkgver.tar.gz
dolfinsum=4f78366458ff166ee84960e80b7eb77ae517f7f4

mshrarchive=mshr-$pkgver.tar.gz
mshrsum=f8b03e68cc77a57c0e88ee5ca8d09cb9b637f791

package() {
  download https://bitbucket.org/fenics-project/fiat/downloads/$fiatarchive
  download https://bitbucket.org/fenics-project/dijitso/downloads/$dijitsoarchive
  download https://bitbucket.org/fenics-project/ufl/downloads/$uflarchive
  download https://bitbucket.org/fenics-project/ffc/downloads/$ffcarchive
  download https://bitbucket.org/fenics-project/dolfin/downloads/$dolfinarchive
  download https://bitbucket.org/fenics-project/mshr/downloads/$mshrarchive

  check $fiatarchive $fiatsum
  check $dijitsoarchive $dijitsosum
  check $uflarchive $uflsum
  check $ffcarchive $ffcsum
  check $dolfinarchive $dolfinsum
  check $mshrarchive $mshrsum

  extract $fiatarchive
  extract $dijitsoarchive
  extract $uflarchive
  extract $ffcarchive
  extract $dolfinarchive
  extract $mshrarchive

  module load boost
  module load eigen
  module load hdf5
  module load metis
  module load openblas
  module load petsc
  module load pybind11
  module load scipy
  module load scotch
  module load suitesparse
  module load trilinos

  # required python packages
  pip3 install ply --install-option="--prefix=$dstdir"

  # make python happy
  export PATH="$dstdir/bin:$PATH"
  export PYTHONPATH="$dstdir/lib/python3.8/site-packages:$PYTHONPATH"

  # installing FIAT
  pushd fiat-$pkgver
    message "Installing FIAT"
    python3 setup.py install --prefix="$dstdir" --optimize=1
  popd

  # installing dijitso
  pushd dijitso-$pkgver
    message "Installing dijitso"
    python3 setup.py install --prefix="$dstdir" --optimize=1
  popd

  # installing UFL
  pushd ufl-$pkgver
    message "Installing UFL"
    python3 setup.py install --prefix="$dstdir" --optimize=1
  popd

  # installing FFC
  pushd ffc-$pkgver
    message "Installing FFC"
    python3 setup.py install --prefix="$dstdir" --optimize=1
  popd

  # installing dolfin
  mkdir build
  pushd dolfin-$pkgver
    message "Patching dolfin"
    [[ -r "$srcdir/dolfin-$pkgver.patch" ]] && \
      patch -p1 -i "$srcdir/dolfin-$pkgver.patch"
  popd
  pushd build
    message "Configuring dolfin"
    HDF5_DIR="$mkHdf5Prefix" \
    PETSC_DIR="$mkPetscPrefix" \
    SLEPC_DIR="$mkPetscPrefix" \
    cmake -D CMAKE_INSTALL_PREFIX="$dstdir" \
          -D CMAKE_SKIP_INSTALL_RPATH=ON \
          -D CMAKE_SKIP_RPATH=ON \
          -D BUILD_SHARED_LIBS=ON \
          -D CMAKE_BUILD_TYPE=Release \
          -D DOLFIN_ENABLE_BENCHMARKS=OFF \
          -D DOLFIN_ENABLE_CODE_COVERAGE=OFF \
          -D DOLFIN_ENABLE_DOCS=OFF \
          -D DOLFIN_ENABLE_TESTING=OFF \
          -D BLAS_LIBRARIES="$mkOpenblasLib/libopenblas.so" \
          -D LAPACK_LIBRARIES="$mkOpenblasLib/libopenblas.so" \
          -D AMD_DIR="$mkSuitesparsePrefix" \
          -D BOOST_ROOT="$mkBoostPrefix" \
          -D CHOLMOD_DIR="$mkSuitesparsePrefix" \
          -D EIGEN3_INCLUDE_DIR="$mkEigenInc" \
          -D PARMETIS_DIR="$mkMetisPrefix" \
          -D SCOTCH_DIR="$mkScotchPrefix" \
          -D TRILINOS_DIR="$mkTrilinosPrefix" \
          -D UMFPACK_DIR="$mkSuitesparsePrefix" \
          -D ZLIB_DIR="$mkToolchainBase" \
          -D ZLIB_INCLUDE_DIR="$mkToolchainBase/include" \
          ../dolfin-$pkgver
    message "Compiling dolfin"
    make VERBOSE=1
    message "Installing dolfin"
    make install

    cd ../dolfin-$pkgver/python
    message "Installing dolfin Python interface"

    BOOST_DIR=$mkBoostPrefix \
    PYBIND11_DIR=$mkPybind11Prefix \
    python3 setup.py install --prefix="$dstdir" --optimize=1
  popd

  # installing mshr
  pushd mshr-$pkgver
    message "Patching mshr"
    [[ -r "$srcdir/mshr-$pkgver.patch" ]] && \
      patch -p1 -i "$srcdir/mshr-$pkgver.patch"
  popd
  pushd build
    rm -rf *
    message "Configuring mshr"
    cmake -D CMAKE_INSTALL_PREFIX="$dstdir" \
          -D CMAKE_SKIP_INSTALL_RPATH=ON \
          -D CMAKE_SKIP_RPATH=ON \
          -D BUILD_SHARED_LIBS=ON \
          -D CMAKE_BUILD_TYPE=Release \
          -D BOOST_ROOT="$mkBoostPrefix" \
          -D DOLFIN_DIR="$dstdir" \
          -D EIGEN3_INCLUDE_DIR="$mkEigenInc" \
          ../mshr-$pkgver
    message "Compiling mshr"
    make VERBOSE=1
    message "Installing mshr"
    make install
  popd

  # installing cbc.block
  git clone https://bitbucket.org/fenics-apps/cbc.block.git
  pushd cbc.block
    message "Installing cbc.block"
    python3 setup.py install --prefix="$dstdir" --optimize=1
  popd

  strip "$dstdir/bin"
  strip "$dstdir/lib"

  reset_rpath "$dstdir/bin"
  reset_rpath "$dstdir/lib"

  compress_doc "$dstdir/share/man"

  if [[ "$mkTest" = "no" ]]; then
    install -vd $mkToolchainModules/$pkgname
    cat > $mkToolchainModules/$pkgname/$pkgver.lua << EOF
-- -*- lua -*-
whatis("A collection of software components for the automated solution of differential equations.")
help([[
The Fenics is installed in "\$mkFenicsPrefix" directory, the dynamic libraries
are located in "\$mkFenicsLib" directory and header files in "\$mkFenicsInc".

url: http://fenicsproject.org
]])

load("boost")
load("eigen")
load("hdf5")
load("metis")
load("openblas")
load("petsc")
load("scipy")
load("scotch")
load("suitesparse")
load("trilinos")

setenv("mkFenicsPrefix", "$dstdir")
setenv("mkFenicsLib", "$dstdir/lib")
setenv("mkFenicsInc", "$dstdir/include")

prepend_path("PATH", "$dstdir/bin")
prepend_path("MANPATH", "$dstdir/share/man")
prepend_path("PYTHONPATH", "$dstdir/lib/python3.8/site-packages")
prepend_path("LD_LIBRARY_PATH", "$dstdir/lib")
prepend_path("PKG_CONFIG_PATH", "$dstdir/lib/pkgconfig")

EOF
  fi
}
